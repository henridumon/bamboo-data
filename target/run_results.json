{"logs": [], "results": [{"node": {"raw_sql": "SELECT format_date( \"%Y%m%d\" ,date_add(PARSE_DATE(\"%Y%m%d\",event_date), interval (select date_diff(current_date, PARSE_DATE(\"%Y%m%d\",max(event_date)),day) FROM `bamboodata-project.analytics_220006363.events_an_purchases`) day)) event_date \r\n       ,event_timestamp + (select date_diff(current_date, PARSE_DATE(\"%Y%m%d\",max(event_date)),day) FROM `bamboodata-project.analytics_220006363.events_an_purchases`) * 3600*24*1000000 as event_timestamp\r\n       ,user_first_touch_timestamp + (select date_diff(current_date, PARSE_DATE(\"%Y%m%d\",max(event_date)),day) FROM `bamboodata-project.analytics_220006363.events_an_purchases`) * 3600*24*1000000 as user_first_touch_timestamp,\r\n\r\n* EXCEPT(event_date, event_timestamp, user_first_touch_timestamp)\r\nFROM `{{target.project}}.analytics_220006363.events_an_purchases`\r\norder by event_timestamp desc", "database": "bamboodata-project", "schema": "dbt_hdumon", "fqn": ["bamboodata", "base", "events"], "unique_id": "model.bamboodata.events", "package_name": "bamboodata", "root_path": "/usr/src/develop/user-9514/environment-11553/repository-9541", "path": "base/events.sql", "original_file_path": "models/base/events.sql", "name": "events", "resource_type": "model", "alias": "events", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/bamboodata/models/base/events.sql", "compiled": true, "compiled_sql": "SELECT format_date( \"%Y%m%d\" ,date_add(PARSE_DATE(\"%Y%m%d\",event_date), interval (select date_diff(current_date, PARSE_DATE(\"%Y%m%d\",max(event_date)),day) FROM `bamboodata-project.analytics_220006363.events_an_purchases`) day)) event_date \n       ,event_timestamp + (select date_diff(current_date, PARSE_DATE(\"%Y%m%d\",max(event_date)),day) FROM `bamboodata-project.analytics_220006363.events_an_purchases`) * 3600*24*1000000 as event_timestamp\n       ,user_first_touch_timestamp + (select date_diff(current_date, PARSE_DATE(\"%Y%m%d\",max(event_date)),day) FROM `bamboodata-project.analytics_220006363.events_an_purchases`) * 3600*24*1000000 as user_first_touch_timestamp,\n\n* EXCEPT(event_date, event_timestamp, user_first_touch_timestamp)\nFROM `bamboodata-project.analytics_220006363.events_an_purchases`\norder by event_timestamp desc", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT format_date( \"%Y%m%d\" ,date_add(PARSE_DATE(\"%Y%m%d\",event_date), interval (select date_diff(current_date, PARSE_DATE(\"%Y%m%d\",max(event_date)),day) FROM `bamboodata-project.analytics_220006363.events_an_purchases`) day)) event_date \n       ,event_timestamp + (select date_diff(current_date, PARSE_DATE(\"%Y%m%d\",max(event_date)),day) FROM `bamboodata-project.analytics_220006363.events_an_purchases`) * 3600*24*1000000 as event_timestamp\n       ,user_first_touch_timestamp + (select date_diff(current_date, PARSE_DATE(\"%Y%m%d\",max(event_date)),day) FROM `bamboodata-project.analytics_220006363.events_an_purchases`) * 3600*24*1000000 as user_first_touch_timestamp,\n\n* EXCEPT(event_date, event_timestamp, user_first_touch_timestamp)\nFROM `bamboodata-project.analytics_220006363.events_an_purchases`\norder by event_timestamp desc"}, "error": null, "status": "CREATE VIEW", "execution_time": 1.1994664669036865, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-27T16:07:06.431205Z", "completed_at": "2020-09-27T16:07:06.465280Z"}, {"name": "execute", "started_at": "2020-09-27T16:07:06.465701Z", "completed_at": "2020-09-27T16:07:07.629726Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with yesterday_new_users as \r\n(\r\nselect geo.country as country, app_info.id, count(distinct user_pseudo_id) yesterday_new_users\r\nFROM {{ref('events')}}\r\nWHERE event_date = FORMAT_DATE(\"%Y%m%d\", DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY))\r\n      and event_timestamp = user_first_touch_timestamp\r\ngroup by geo.country, app_info.id\r\n),\r\n\r\nprev_day_new_users as\r\n(\r\nselect geo.country as country, app_info.id, count(distinct user_pseudo_id) prev_day_new_users\r\nFROM {{ref('events')}}\r\nWHERE event_date = FORMAT_DATE(\"%Y%m%d\", DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY))\r\n      and event_timestamp = user_first_touch_timestamp\r\ngroup by geo.country, app_info.id\r\n),\r\n\r\nthree_day_ago_new_users as\r\n(\r\nselect geo.country as country, app_info.id, count(distinct user_pseudo_id) three_day_ago_new_users\r\nFROM {{ref('events')}}\r\nWHERE event_date = FORMAT_DATE(\"%Y%m%d\", DATE_SUB(CURRENT_DATE(), INTERVAL 3 DAY))\r\n      and event_timestamp = user_first_touch_timestamp\r\ngroup by geo.country, app_info.id\r\n),\r\n\r\nlast_week_users as\r\n(\r\nselect geo.country as country, app_info.id, count(distinct user_pseudo_id) last_week_users\r\nFROM {{ref('events')}}\r\nWHERE event_date <= FORMAT_DATE(\"%Y%m%d\", DATE_TRUNC(CURRENT_DATE(), WEEK))\r\n      AND event_date > FORMAT_DATE(\"%Y%m%d\", DATE_SUB(DATE_TRUNC(CURRENT_DATE(), WEEK), INTERVAL 1 WEEK))\r\n      and event_timestamp = user_first_touch_timestamp\r\ngroup by geo.country,app_info.id),\r\n\r\nprevious_week_users as\r\n(\r\nselect geo.country as country, app_info.id, count(distinct user_pseudo_id) prev_week_users\r\nFROM {{ref('events')}}\r\nWHERE event_date <= FORMAT_DATE(\"%Y%m%d\", DATE_SUB(DATE_TRUNC(CURRENT_DATE(), WEEK), INTERVAL 1 WEEK))\r\n      AND event_date > FORMAT_DATE(\"%Y%m%d\", DATE_SUB(DATE_TRUNC(CURRENT_DATE(), WEEK), INTERVAL 2 WEEK))\r\n      and event_timestamp = user_first_touch_timestamp\r\ngroup by geo.country, app_info.id)\r\n\r\n\r\nselect lwu.country, struct(lwu.id) as app_info, ynu.yesterday_new_users, pdnu.prev_day_new_users, tdnu.three_day_ago_new_users ,lwu.last_week_users, pwu.prev_week_users\r\nfrom last_week_users lwu\r\nleft join yesterday_new_users ynu\r\non lwu.country = ynu.country\r\nand lwu.id = ynu.id\r\nleft join prev_day_new_users pdnu\r\non lwu.country = pdnu.country\r\nand lwu.id = pdnu.id\r\nleft join three_day_ago_new_users tdnu\r\non lwu.country = tdnu.country\r\nand lwu.id = tdnu.id\r\nleft join previous_week_users pwu\r\non lwu.country = pwu.country\r\nand lwu.id = pwu.id", "database": "bamboodata-project", "schema": "dbt_hdumon", "fqn": ["bamboodata", "output", "bbd_country_user_progress"], "unique_id": "model.bamboodata.bbd_country_user_progress", "package_name": "bamboodata", "root_path": "/usr/src/develop/user-9514/environment-11553/repository-9541", "path": "output/bbd_country_user_progress.sql", "original_file_path": "models/output/bbd_country_user_progress.sql", "name": "bbd_country_user_progress", "resource_type": "model", "alias": "bbd_country_user_progress", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["events"], ["events"], ["events"], ["events"], ["events"]], "sources": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.bamboodata.events", "model.bamboodata.events", "model.bamboodata.events", "model.bamboodata.events", "model.bamboodata.events"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/bamboodata/models/output/bbd_country_user_progress.sql", "compiled": true, "compiled_sql": "with yesterday_new_users as \n(\nselect geo.country as country, app_info.id, count(distinct user_pseudo_id) yesterday_new_users\nFROM `bamboodata-project`.`dbt_hdumon`.`events`\nWHERE event_date = FORMAT_DATE(\"%Y%m%d\", DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY))\n      and event_timestamp = user_first_touch_timestamp\ngroup by geo.country, app_info.id\n),\n\nprev_day_new_users as\n(\nselect geo.country as country, app_info.id, count(distinct user_pseudo_id) prev_day_new_users\nFROM `bamboodata-project`.`dbt_hdumon`.`events`\nWHERE event_date = FORMAT_DATE(\"%Y%m%d\", DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY))\n      and event_timestamp = user_first_touch_timestamp\ngroup by geo.country, app_info.id\n),\n\nthree_day_ago_new_users as\n(\nselect geo.country as country, app_info.id, count(distinct user_pseudo_id) three_day_ago_new_users\nFROM `bamboodata-project`.`dbt_hdumon`.`events`\nWHERE event_date = FORMAT_DATE(\"%Y%m%d\", DATE_SUB(CURRENT_DATE(), INTERVAL 3 DAY))\n      and event_timestamp = user_first_touch_timestamp\ngroup by geo.country, app_info.id\n),\n\nlast_week_users as\n(\nselect geo.country as country, app_info.id, count(distinct user_pseudo_id) last_week_users\nFROM `bamboodata-project`.`dbt_hdumon`.`events`\nWHERE event_date <= FORMAT_DATE(\"%Y%m%d\", DATE_TRUNC(CURRENT_DATE(), WEEK))\n      AND event_date > FORMAT_DATE(\"%Y%m%d\", DATE_SUB(DATE_TRUNC(CURRENT_DATE(), WEEK), INTERVAL 1 WEEK))\n      and event_timestamp = user_first_touch_timestamp\ngroup by geo.country,app_info.id),\n\nprevious_week_users as\n(\nselect geo.country as country, app_info.id, count(distinct user_pseudo_id) prev_week_users\nFROM `bamboodata-project`.`dbt_hdumon`.`events`\nWHERE event_date <= FORMAT_DATE(\"%Y%m%d\", DATE_SUB(DATE_TRUNC(CURRENT_DATE(), WEEK), INTERVAL 1 WEEK))\n      AND event_date > FORMAT_DATE(\"%Y%m%d\", DATE_SUB(DATE_TRUNC(CURRENT_DATE(), WEEK), INTERVAL 2 WEEK))\n      and event_timestamp = user_first_touch_timestamp\ngroup by geo.country, app_info.id)\n\n\nselect lwu.country, struct(lwu.id) as app_info, ynu.yesterday_new_users, pdnu.prev_day_new_users, tdnu.three_day_ago_new_users ,lwu.last_week_users, pwu.prev_week_users\nfrom last_week_users lwu\nleft join yesterday_new_users ynu\non lwu.country = ynu.country\nand lwu.id = ynu.id\nleft join prev_day_new_users pdnu\non lwu.country = pdnu.country\nand lwu.id = pdnu.id\nleft join three_day_ago_new_users tdnu\non lwu.country = tdnu.country\nand lwu.id = tdnu.id\nleft join previous_week_users pwu\non lwu.country = pwu.country\nand lwu.id = pwu.id", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with yesterday_new_users as \n(\nselect geo.country as country, app_info.id, count(distinct user_pseudo_id) yesterday_new_users\nFROM `bamboodata-project`.`dbt_hdumon`.`events`\nWHERE event_date = FORMAT_DATE(\"%Y%m%d\", DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY))\n      and event_timestamp = user_first_touch_timestamp\ngroup by geo.country, app_info.id\n),\n\nprev_day_new_users as\n(\nselect geo.country as country, app_info.id, count(distinct user_pseudo_id) prev_day_new_users\nFROM `bamboodata-project`.`dbt_hdumon`.`events`\nWHERE event_date = FORMAT_DATE(\"%Y%m%d\", DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY))\n      and event_timestamp = user_first_touch_timestamp\ngroup by geo.country, app_info.id\n),\n\nthree_day_ago_new_users as\n(\nselect geo.country as country, app_info.id, count(distinct user_pseudo_id) three_day_ago_new_users\nFROM `bamboodata-project`.`dbt_hdumon`.`events`\nWHERE event_date = FORMAT_DATE(\"%Y%m%d\", DATE_SUB(CURRENT_DATE(), INTERVAL 3 DAY))\n      and event_timestamp = user_first_touch_timestamp\ngroup by geo.country, app_info.id\n),\n\nlast_week_users as\n(\nselect geo.country as country, app_info.id, count(distinct user_pseudo_id) last_week_users\nFROM `bamboodata-project`.`dbt_hdumon`.`events`\nWHERE event_date <= FORMAT_DATE(\"%Y%m%d\", DATE_TRUNC(CURRENT_DATE(), WEEK))\n      AND event_date > FORMAT_DATE(\"%Y%m%d\", DATE_SUB(DATE_TRUNC(CURRENT_DATE(), WEEK), INTERVAL 1 WEEK))\n      and event_timestamp = user_first_touch_timestamp\ngroup by geo.country,app_info.id),\n\nprevious_week_users as\n(\nselect geo.country as country, app_info.id, count(distinct user_pseudo_id) prev_week_users\nFROM `bamboodata-project`.`dbt_hdumon`.`events`\nWHERE event_date <= FORMAT_DATE(\"%Y%m%d\", DATE_SUB(DATE_TRUNC(CURRENT_DATE(), WEEK), INTERVAL 1 WEEK))\n      AND event_date > FORMAT_DATE(\"%Y%m%d\", DATE_SUB(DATE_TRUNC(CURRENT_DATE(), WEEK), INTERVAL 2 WEEK))\n      and event_timestamp = user_first_touch_timestamp\ngroup by geo.country, app_info.id)\n\n\nselect lwu.country, struct(lwu.id) as app_info, ynu.yesterday_new_users, pdnu.prev_day_new_users, tdnu.three_day_ago_new_users ,lwu.last_week_users, pwu.prev_week_users\nfrom last_week_users lwu\nleft join yesterday_new_users ynu\non lwu.country = ynu.country\nand lwu.id = ynu.id\nleft join prev_day_new_users pdnu\non lwu.country = pdnu.country\nand lwu.id = pdnu.id\nleft join three_day_ago_new_users tdnu\non lwu.country = tdnu.country\nand lwu.id = tdnu.id\nleft join previous_week_users pwu\non lwu.country = pwu.country\nand lwu.id = pwu.id"}, "error": null, "status": "CREATE VIEW", "execution_time": 1.0596795082092285, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-27T16:07:07.636030Z", "completed_at": "2020-09-27T16:07:07.694144Z"}, {"name": "execute", "started_at": "2020-09-27T16:07:07.694604Z", "completed_at": "2020-09-27T16:07:08.694751Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT\r\n  *,\r\n  extract(hour from timestamp_micros(event_timestamp)) event_hour,\r\n        case when extract(dayofweek from timestamp_micros(event_timestamp)) = 1 then '1. Monday'\r\n             when extract(dayofweek from timestamp_micros(event_timestamp)) = 2 then '2. Tuesday'\r\n             when extract(dayofweek from timestamp_micros(event_timestamp)) = 3 then '3. Wednesday'\r\n             when extract(dayofweek from timestamp_micros(event_timestamp)) = 4 then '4. Thursday'\r\n             when extract(dayofweek from timestamp_micros(event_timestamp)) = 5 then '5. Friday'\r\n             when extract(dayofweek from timestamp_micros(event_timestamp)) = 6 then '6. Saturday'\r\n             when extract(dayofweek from timestamp_micros(event_timestamp)) = 7 then '7. Sunday'\r\n        end as event_weekday_name,\r\n  case when traffic_source.name = '(direct)' or traffic_source.name = '(organic)' or traffic_source.name is null then 'Organic' else traffic_source.name end as acquisition_channel,\r\n  FORMAT_TIMESTAMP(\"%Y-%m-%d %H:%M:%S\",TIMESTAMP_MICROS(event_timestamp)) event_time,\r\n  coalesce(device.vendor_id,\r\n    device.advertising_id) vendor_advertising_id,\r\n  DATE_DIFF(EXTRACT(DATE\r\n    FROM\r\n      TIMESTAMP_MICROS(event_timestamp)), EXTRACT(DATE\r\n    FROM\r\n      TIMESTAMP_MICROS(user_first_touch_timestamp)),DAY) AS days_since_first_touch,\r\n  CASE\r\n    WHEN MAX(CASE\r\n      WHEN user_id IS NOT NULL THEN 1\r\n    ELSE\r\n    0\r\n  END\r\n    ) OVER (PARTITION BY user_pseudo_id) = 1 THEN 'Registered User'\r\n  ELSE\r\n  'Non Registered User'\r\nEND\r\n  AS registered_user_flag,\r\n  CASE\r\n    WHEN MAX(CASE\r\n      WHEN event_name = 'in_app_purchase' THEN 1\r\n    ELSE\r\n    0\r\n  END\r\n    ) OVER (PARTITION BY user_pseudo_id) = 1 THEN 'Paying User'\r\n  ELSE\r\n  'Non Paying User'\r\nEND\r\n  AS paying_user_flag\r\nFROM\r\n  {{ref('events')}}", "database": "bamboodata-project", "schema": "dbt_hdumon", "fqn": ["bamboodata", "output", "bbd_events_all_days"], "unique_id": "model.bamboodata.bbd_events_all_days", "package_name": "bamboodata", "root_path": "/usr/src/develop/user-9514/environment-11553/repository-9541", "path": "output/bbd_events_all_days.sql", "original_file_path": "models/output/bbd_events_all_days.sql", "name": "bbd_events_all_days", "resource_type": "model", "alias": "bbd_events_all_days", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["events"]], "sources": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.bamboodata.events"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/bamboodata/models/output/bbd_events_all_days.sql", "compiled": true, "compiled_sql": "SELECT\n  *,\n  extract(hour from timestamp_micros(event_timestamp)) event_hour,\n        case when extract(dayofweek from timestamp_micros(event_timestamp)) = 1 then '1. Monday'\n             when extract(dayofweek from timestamp_micros(event_timestamp)) = 2 then '2. Tuesday'\n             when extract(dayofweek from timestamp_micros(event_timestamp)) = 3 then '3. Wednesday'\n             when extract(dayofweek from timestamp_micros(event_timestamp)) = 4 then '4. Thursday'\n             when extract(dayofweek from timestamp_micros(event_timestamp)) = 5 then '5. Friday'\n             when extract(dayofweek from timestamp_micros(event_timestamp)) = 6 then '6. Saturday'\n             when extract(dayofweek from timestamp_micros(event_timestamp)) = 7 then '7. Sunday'\n        end as event_weekday_name,\n  case when traffic_source.name = '(direct)' or traffic_source.name = '(organic)' or traffic_source.name is null then 'Organic' else traffic_source.name end as acquisition_channel,\n  FORMAT_TIMESTAMP(\"%Y-%m-%d %H:%M:%S\",TIMESTAMP_MICROS(event_timestamp)) event_time,\n  coalesce(device.vendor_id,\n    device.advertising_id) vendor_advertising_id,\n  DATE_DIFF(EXTRACT(DATE\n    FROM\n      TIMESTAMP_MICROS(event_timestamp)), EXTRACT(DATE\n    FROM\n      TIMESTAMP_MICROS(user_first_touch_timestamp)),DAY) AS days_since_first_touch,\n  CASE\n    WHEN MAX(CASE\n      WHEN user_id IS NOT NULL THEN 1\n    ELSE\n    0\n  END\n    ) OVER (PARTITION BY user_pseudo_id) = 1 THEN 'Registered User'\n  ELSE\n  'Non Registered User'\nEND\n  AS registered_user_flag,\n  CASE\n    WHEN MAX(CASE\n      WHEN event_name = 'in_app_purchase' THEN 1\n    ELSE\n    0\n  END\n    ) OVER (PARTITION BY user_pseudo_id) = 1 THEN 'Paying User'\n  ELSE\n  'Non Paying User'\nEND\n  AS paying_user_flag\nFROM\n  `bamboodata-project`.`dbt_hdumon`.`events`", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\n  *,\n  extract(hour from timestamp_micros(event_timestamp)) event_hour,\n        case when extract(dayofweek from timestamp_micros(event_timestamp)) = 1 then '1. Monday'\n             when extract(dayofweek from timestamp_micros(event_timestamp)) = 2 then '2. Tuesday'\n             when extract(dayofweek from timestamp_micros(event_timestamp)) = 3 then '3. Wednesday'\n             when extract(dayofweek from timestamp_micros(event_timestamp)) = 4 then '4. Thursday'\n             when extract(dayofweek from timestamp_micros(event_timestamp)) = 5 then '5. Friday'\n             when extract(dayofweek from timestamp_micros(event_timestamp)) = 6 then '6. Saturday'\n             when extract(dayofweek from timestamp_micros(event_timestamp)) = 7 then '7. Sunday'\n        end as event_weekday_name,\n  case when traffic_source.name = '(direct)' or traffic_source.name = '(organic)' or traffic_source.name is null then 'Organic' else traffic_source.name end as acquisition_channel,\n  FORMAT_TIMESTAMP(\"%Y-%m-%d %H:%M:%S\",TIMESTAMP_MICROS(event_timestamp)) event_time,\n  coalesce(device.vendor_id,\n    device.advertising_id) vendor_advertising_id,\n  DATE_DIFF(EXTRACT(DATE\n    FROM\n      TIMESTAMP_MICROS(event_timestamp)), EXTRACT(DATE\n    FROM\n      TIMESTAMP_MICROS(user_first_touch_timestamp)),DAY) AS days_since_first_touch,\n  CASE\n    WHEN MAX(CASE\n      WHEN user_id IS NOT NULL THEN 1\n    ELSE\n    0\n  END\n    ) OVER (PARTITION BY user_pseudo_id) = 1 THEN 'Registered User'\n  ELSE\n  'Non Registered User'\nEND\n  AS registered_user_flag,\n  CASE\n    WHEN MAX(CASE\n      WHEN event_name = 'in_app_purchase' THEN 1\n    ELSE\n    0\n  END\n    ) OVER (PARTITION BY user_pseudo_id) = 1 THEN 'Paying User'\n  ELSE\n  'Non Paying User'\nEND\n  AS paying_user_flag\nFROM\n  `bamboodata-project`.`dbt_hdumon`.`events`"}, "error": null, "status": "CREATE VIEW", "execution_time": 0.9751770496368408, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-27T16:07:08.698500Z", "completed_at": "2020-09-27T16:07:08.717028Z"}, {"name": "execute", "started_at": "2020-09-27T16:07:08.717390Z", "completed_at": "2020-09-27T16:07:09.672668Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with data as\n(\nSELECT\n  *,\n  FORMAT_TIMESTAMP(\"%Y-%m-%d %H:%M:%S\",TIMESTAMP_MICROS(event_timestamp)) event_time,\n  coalesce(device.vendor_id,\n    device.advertising_id) vendor_advertising_id,\n  DATE_DIFF(EXTRACT(DATE\n    FROM\n      TIMESTAMP_MICROS(event_timestamp)), EXTRACT(DATE\n    FROM\n      TIMESTAMP_MICROS(user_first_touch_timestamp)),DAY) AS days_since_first_touch,\n  CASE\n    WHEN MAX(CASE\n      WHEN user_id IS NOT NULL THEN 1\n    ELSE\n    0\n  END\n    ) OVER (PARTITION BY user_pseudo_id) = 1 THEN 'Registered User'\n  ELSE\n  'Non Registered User'\nEND\n  AS registered_user_flag,\n  CASE\n    WHEN MAX(CASE\n      WHEN event_name = 'in_app_purchase' THEN 1\n    ELSE\n    0\n  END\n    ) OVER (PARTITION BY user_pseudo_id) = 1 THEN 'Paying User'\n  ELSE\n  'Non Paying User'\nEND\n  AS paying_user_flag\nFROM\n  {{ref('events')}}\n)\n\nSELECT\n  event_time, event_date, days_since_first_touch, event_timestamp, user_id, vendor_advertising_id, event_name, key, value.int_value, value.string_value\nFROM\n  data ,\n  UNNEST(event_params)", "database": "bamboodata-project", "schema": "dbt_hdumon", "fqn": ["bamboodata", "output", "bbd_events_all_days_unnested"], "unique_id": "model.bamboodata.bbd_events_all_days_unnested", "package_name": "bamboodata", "root_path": "/usr/src/develop/user-9514/environment-11553/repository-9541", "path": "output/bbd_events_all_days_unnested.sql", "original_file_path": "models/output/bbd_events_all_days_unnested.sql", "name": "bbd_events_all_days_unnested", "resource_type": "model", "alias": "bbd_events_all_days_unnested", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["events"]], "sources": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.bamboodata.events"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/bamboodata/models/output/bbd_events_all_days_unnested.sql", "compiled": true, "compiled_sql": "with data as\n(\nSELECT\n  *,\n  FORMAT_TIMESTAMP(\"%Y-%m-%d %H:%M:%S\",TIMESTAMP_MICROS(event_timestamp)) event_time,\n  coalesce(device.vendor_id,\n    device.advertising_id) vendor_advertising_id,\n  DATE_DIFF(EXTRACT(DATE\n    FROM\n      TIMESTAMP_MICROS(event_timestamp)), EXTRACT(DATE\n    FROM\n      TIMESTAMP_MICROS(user_first_touch_timestamp)),DAY) AS days_since_first_touch,\n  CASE\n    WHEN MAX(CASE\n      WHEN user_id IS NOT NULL THEN 1\n    ELSE\n    0\n  END\n    ) OVER (PARTITION BY user_pseudo_id) = 1 THEN 'Registered User'\n  ELSE\n  'Non Registered User'\nEND\n  AS registered_user_flag,\n  CASE\n    WHEN MAX(CASE\n      WHEN event_name = 'in_app_purchase' THEN 1\n    ELSE\n    0\n  END\n    ) OVER (PARTITION BY user_pseudo_id) = 1 THEN 'Paying User'\n  ELSE\n  'Non Paying User'\nEND\n  AS paying_user_flag\nFROM\n  `bamboodata-project`.`dbt_hdumon`.`events`\n)\n\nSELECT\n  event_time, event_date, days_since_first_touch, event_timestamp, user_id, vendor_advertising_id, event_name, key, value.int_value, value.string_value\nFROM\n  data ,\n  UNNEST(event_params)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with data as\n(\nSELECT\n  *,\n  FORMAT_TIMESTAMP(\"%Y-%m-%d %H:%M:%S\",TIMESTAMP_MICROS(event_timestamp)) event_time,\n  coalesce(device.vendor_id,\n    device.advertising_id) vendor_advertising_id,\n  DATE_DIFF(EXTRACT(DATE\n    FROM\n      TIMESTAMP_MICROS(event_timestamp)), EXTRACT(DATE\n    FROM\n      TIMESTAMP_MICROS(user_first_touch_timestamp)),DAY) AS days_since_first_touch,\n  CASE\n    WHEN MAX(CASE\n      WHEN user_id IS NOT NULL THEN 1\n    ELSE\n    0\n  END\n    ) OVER (PARTITION BY user_pseudo_id) = 1 THEN 'Registered User'\n  ELSE\n  'Non Registered User'\nEND\n  AS registered_user_flag,\n  CASE\n    WHEN MAX(CASE\n      WHEN event_name = 'in_app_purchase' THEN 1\n    ELSE\n    0\n  END\n    ) OVER (PARTITION BY user_pseudo_id) = 1 THEN 'Paying User'\n  ELSE\n  'Non Paying User'\nEND\n  AS paying_user_flag\nFROM\n  `bamboodata-project`.`dbt_hdumon`.`events`\n)\n\nSELECT\n  event_time, event_date, days_since_first_touch, event_timestamp, user_id, vendor_advertising_id, event_name, key, value.int_value, value.string_value\nFROM\n  data ,\n  UNNEST(event_params)"}, "error": null, "status": "CREATE VIEW", "execution_time": 1.2140560150146484, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-27T16:07:09.678068Z", "completed_at": "2020-09-27T16:07:09.701519Z"}, {"name": "execute", "started_at": "2020-09-27T16:07:09.701945Z", "completed_at": "2020-09-27T16:07:10.891217Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "WITH\r\n  users AS ( \r\n  SELECT\r\n    DISTINCT user_pseudo_id,\r\n    geo.country\r\n  FROM\r\n    `bamboodata-project.analytics_220006363.events_` /* INSERT NAME OF YOUR EVENTS TABLE HERE */\r\n  WHERE\r\n    event_timestamp = user_first_touch_timestamp),\r\n  registrations AS (\r\n  SELECT\r\n    DISTINCT user_pseudo_id,\r\n    MAX(CASE\r\n        WHEN user_id IS NOT NULL THEN 1\r\n      ELSE\r\n      0\r\n    END\r\n      ) OVER (PARTITION BY user_pseudo_id) AS registered_user_flag\r\n  FROM\r\n    {{ref('events')}}), /* INSERT NAME OF YOUR EVENTS TABLE HERE */\r\n  paying_users AS (\r\n  SELECT\r\n    DISTINCT user_pseudo_id,\r\n    1 AS paying_user_flag\r\n  FROM\r\n    `bamboodata-project.analytics_220006363.events_` /* INSERT NAME OF YOUR EVENTS TABLE HERE */\r\n  WHERE\r\n    event_name = 'in_app_purchase'),\r\n  by_week AS (\r\n  SELECT\r\n    DISTINCT TIMESTAMP_TRUNC(TIMESTAMP_MICROS(user_first_touch_timestamp), WEEK(MONDAY), 'UTC') AS first_touch_week,\r\n    TIMESTAMP_TRUNC(TIMESTAMP_MICROS(event_timestamp), WEEK(MONDAY), 'UTC') AS event_week,\r\n    event_name,\r\n    device.category device_category,\r\n    app_info.id app_info_id,\r\n    user_pseudo_id\r\n  FROM\r\n    {{ref('events')}} /* INSERT NAME OF YOUR EVENTS TABLE HERE */\r\n--   WHERE\r\n--    _TABLE_SUFFIX BETWEEN FORMAT_DATE(\"%Y%m%d\", DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH)) /* FILTER OUT EVENTS TABLES THAT ARE MORE THAN 3 MONTHS OLD */\r\n--     AND FORMAT_DATE(\"%Y%m%d\", DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)) \r\n  GROUP BY\r\n    first_touch_week,\r\n    event_week,\r\n    event_name,\r\n    user_pseudo_id,\r\n    device.category,\r\n    app_info.id),\r\n  with_week_number AS (\r\n  SELECT\r\n    bw.user_pseudo_id,\r\n    CASE\r\n      WHEN pu.paying_user_flag = 1 THEN 'Paying user'\r\n    ELSE\r\n    'Non paying user'\r\n  END\r\n    paying_user_flag,\r\n    users.country,\r\n    reg.registered_user_flag,\r\n    bw.first_touch_week,\r\n    bw.event_week,\r\n    device_category,\r\n    app_info_id,\r\n    bw.event_name,\r\n    FLOOR( TIMESTAMP_DIFF(bw.event_week, bw.first_touch_week, DAY)/7 ) AS weeks_since_first_touch\r\n  FROM\r\n    by_week bw\r\n  LEFT JOIN\r\n    users\r\n  ON\r\n    bw.user_pseudo_id = users.user_pseudo_id\r\n  LEFT JOIN\r\n    registrations reg\r\n  ON\r\n    bw.user_pseudo_id = reg.user_pseudo_id\r\n  LEFT JOIN\r\n    paying_users pu\r\n  ON\r\n    bw.user_pseudo_id = pu.user_pseudo_id )\r\nSELECT\r\n  country,\r\n  registered_user_flag,\r\n  paying_user_flag,\r\n  first_touch_week,\r\n  device_category,\r\n  app_info_id,\r\n  event_name,\r\n  user_pseudo_id,\r\n  CASE\r\n    WHEN MAX(CASE\r\n      WHEN weeks_since_first_touch = 0 THEN 1\r\n    ELSE\r\n    0\r\n  END\r\n    ) = 1 THEN user_pseudo_id\r\n  ELSE\r\n  NULL\r\nEND\r\n  week_0,\r\n  CASE\r\n    WHEN MAX(CASE\r\n      WHEN weeks_since_first_touch = 1 THEN 1\r\n    ELSE\r\n    0\r\n  END\r\n    ) = 1 THEN user_pseudo_id\r\n  ELSE\r\n  NULL\r\nEND\r\n  week_1,\r\n  CASE\r\n    WHEN MAX(CASE\r\n      WHEN weeks_since_first_touch = 2 THEN 1\r\n    ELSE\r\n    0\r\n  END\r\n    ) = 1 THEN user_pseudo_id\r\n  ELSE\r\n  NULL\r\nEND\r\n  week_2,\r\n  CASE\r\n    WHEN MAX(CASE\r\n      WHEN weeks_since_first_touch = 3 THEN 1\r\n    ELSE\r\n    0\r\n  END\r\n    ) = 1 THEN user_pseudo_id\r\n  ELSE\r\n  NULL\r\nEND\r\n  week_3,\r\n  CASE\r\n    WHEN MAX(CASE\r\n      WHEN weeks_since_first_touch = 4 THEN 1\r\n    ELSE\r\n    0\r\n  END\r\n    ) = 1 THEN user_pseudo_id\r\n  ELSE\r\n  NULL\r\nEND\r\n  week_4,\r\n  CASE\r\n    WHEN MAX(CASE\r\n      WHEN weeks_since_first_touch = 5 THEN 1\r\n    ELSE\r\n    0\r\n  END\r\n    ) = 1 THEN user_pseudo_id\r\n  ELSE\r\n  NULL\r\nEND\r\n  week_5,\r\n  CASE\r\n    WHEN MAX(CASE\r\n      WHEN weeks_since_first_touch = 6 THEN 1\r\n    ELSE\r\n    0\r\n  END\r\n    ) = 1 THEN user_pseudo_id\r\n  ELSE\r\n  NULL\r\nEND\r\n  week_6,\r\n  CASE\r\n    WHEN MAX(CASE\r\n      WHEN weeks_since_first_touch = 7 THEN 1\r\n    ELSE\r\n    0\r\n  END\r\n    ) = 1 THEN user_pseudo_id\r\n  ELSE\r\n  NULL\r\nEND\r\n  week_7,\r\n  CASE\r\n    WHEN MAX(CASE\r\n      WHEN weeks_since_first_touch = 8 THEN 1\r\n    ELSE\r\n    0\r\n  END\r\n    ) = 1 THEN user_pseudo_id\r\n  ELSE\r\n  NULL\r\nEND\r\n  week_8,\r\n  CASE\r\n    WHEN MAX(CASE\r\n      WHEN weeks_since_first_touch = 9 THEN 1\r\n    ELSE\r\n    0\r\n  END\r\n    ) = 1 THEN user_pseudo_id\r\n  ELSE\r\n  NULL\r\nEND\r\n  week_9,\r\n  CASE\r\n    WHEN MAX(CASE\r\n      WHEN weeks_since_first_touch = 10 THEN 1\r\n    ELSE\r\n    0\r\n  END\r\n    ) = 1 THEN user_pseudo_id\r\n  ELSE\r\n  NULL\r\nEND\r\n  week_10\r\nFROM\r\n  with_week_number\r\nWHERE\r\n  DATE(first_touch_week) >= DATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 10 WEEK),WEEK(MONDAY))\r\nGROUP BY\r\n  user_pseudo_id,\r\n  country,\r\n  registered_user_flag,\r\n  paying_user_flag,\r\n  first_touch_week,\r\n  app_info_id,\r\n  device_category,\r\n  event_name,\r\n  user_pseudo_id", "database": "bamboodata-project", "schema": "dbt_hdumon", "fqn": ["bamboodata", "output", "bbd_week_on_week_retention_rate"], "unique_id": "model.bamboodata.bbd_week_on_week_retention_rate", "package_name": "bamboodata", "root_path": "/usr/src/develop/user-9514/environment-11553/repository-9541", "path": "output/bbd_week_on_week_retention_rate.sql", "original_file_path": "models/output/bbd_week_on_week_retention_rate.sql", "name": "bbd_week_on_week_retention_rate", "resource_type": "model", "alias": "bbd_week_on_week_retention_rate", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["events"], ["events"]], "sources": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.bamboodata.events", "model.bamboodata.events"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/bamboodata/models/output/bbd_week_on_week_retention_rate.sql", "compiled": true, "compiled_sql": "WITH\n  users AS ( \n  SELECT\n    DISTINCT user_pseudo_id,\n    geo.country\n  FROM\n    `bamboodata-project.analytics_220006363.events_` /* INSERT NAME OF YOUR EVENTS TABLE HERE */\n  WHERE\n    event_timestamp = user_first_touch_timestamp),\n  registrations AS (\n  SELECT\n    DISTINCT user_pseudo_id,\n    MAX(CASE\n        WHEN user_id IS NOT NULL THEN 1\n      ELSE\n      0\n    END\n      ) OVER (PARTITION BY user_pseudo_id) AS registered_user_flag\n  FROM\n    `bamboodata-project`.`dbt_hdumon`.`events`), /* INSERT NAME OF YOUR EVENTS TABLE HERE */\n  paying_users AS (\n  SELECT\n    DISTINCT user_pseudo_id,\n    1 AS paying_user_flag\n  FROM\n    `bamboodata-project.analytics_220006363.events_` /* INSERT NAME OF YOUR EVENTS TABLE HERE */\n  WHERE\n    event_name = 'in_app_purchase'),\n  by_week AS (\n  SELECT\n    DISTINCT TIMESTAMP_TRUNC(TIMESTAMP_MICROS(user_first_touch_timestamp), WEEK(MONDAY), 'UTC') AS first_touch_week,\n    TIMESTAMP_TRUNC(TIMESTAMP_MICROS(event_timestamp), WEEK(MONDAY), 'UTC') AS event_week,\n    event_name,\n    device.category device_category,\n    app_info.id app_info_id,\n    user_pseudo_id\n  FROM\n    `bamboodata-project`.`dbt_hdumon`.`events` /* INSERT NAME OF YOUR EVENTS TABLE HERE */\n--   WHERE\n--    _TABLE_SUFFIX BETWEEN FORMAT_DATE(\"%Y%m%d\", DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH)) /* FILTER OUT EVENTS TABLES THAT ARE MORE THAN 3 MONTHS OLD */\n--     AND FORMAT_DATE(\"%Y%m%d\", DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)) \n  GROUP BY\n    first_touch_week,\n    event_week,\n    event_name,\n    user_pseudo_id,\n    device.category,\n    app_info.id),\n  with_week_number AS (\n  SELECT\n    bw.user_pseudo_id,\n    CASE\n      WHEN pu.paying_user_flag = 1 THEN 'Paying user'\n    ELSE\n    'Non paying user'\n  END\n    paying_user_flag,\n    users.country,\n    reg.registered_user_flag,\n    bw.first_touch_week,\n    bw.event_week,\n    device_category,\n    app_info_id,\n    bw.event_name,\n    FLOOR( TIMESTAMP_DIFF(bw.event_week, bw.first_touch_week, DAY)/7 ) AS weeks_since_first_touch\n  FROM\n    by_week bw\n  LEFT JOIN\n    users\n  ON\n    bw.user_pseudo_id = users.user_pseudo_id\n  LEFT JOIN\n    registrations reg\n  ON\n    bw.user_pseudo_id = reg.user_pseudo_id\n  LEFT JOIN\n    paying_users pu\n  ON\n    bw.user_pseudo_id = pu.user_pseudo_id )\nSELECT\n  country,\n  registered_user_flag,\n  paying_user_flag,\n  first_touch_week,\n  device_category,\n  app_info_id,\n  event_name,\n  user_pseudo_id,\n  CASE\n    WHEN MAX(CASE\n      WHEN weeks_since_first_touch = 0 THEN 1\n    ELSE\n    0\n  END\n    ) = 1 THEN user_pseudo_id\n  ELSE\n  NULL\nEND\n  week_0,\n  CASE\n    WHEN MAX(CASE\n      WHEN weeks_since_first_touch = 1 THEN 1\n    ELSE\n    0\n  END\n    ) = 1 THEN user_pseudo_id\n  ELSE\n  NULL\nEND\n  week_1,\n  CASE\n    WHEN MAX(CASE\n      WHEN weeks_since_first_touch = 2 THEN 1\n    ELSE\n    0\n  END\n    ) = 1 THEN user_pseudo_id\n  ELSE\n  NULL\nEND\n  week_2,\n  CASE\n    WHEN MAX(CASE\n      WHEN weeks_since_first_touch = 3 THEN 1\n    ELSE\n    0\n  END\n    ) = 1 THEN user_pseudo_id\n  ELSE\n  NULL\nEND\n  week_3,\n  CASE\n    WHEN MAX(CASE\n      WHEN weeks_since_first_touch = 4 THEN 1\n    ELSE\n    0\n  END\n    ) = 1 THEN user_pseudo_id\n  ELSE\n  NULL\nEND\n  week_4,\n  CASE\n    WHEN MAX(CASE\n      WHEN weeks_since_first_touch = 5 THEN 1\n    ELSE\n    0\n  END\n    ) = 1 THEN user_pseudo_id\n  ELSE\n  NULL\nEND\n  week_5,\n  CASE\n    WHEN MAX(CASE\n      WHEN weeks_since_first_touch = 6 THEN 1\n    ELSE\n    0\n  END\n    ) = 1 THEN user_pseudo_id\n  ELSE\n  NULL\nEND\n  week_6,\n  CASE\n    WHEN MAX(CASE\n      WHEN weeks_since_first_touch = 7 THEN 1\n    ELSE\n    0\n  END\n    ) = 1 THEN user_pseudo_id\n  ELSE\n  NULL\nEND\n  week_7,\n  CASE\n    WHEN MAX(CASE\n      WHEN weeks_since_first_touch = 8 THEN 1\n    ELSE\n    0\n  END\n    ) = 1 THEN user_pseudo_id\n  ELSE\n  NULL\nEND\n  week_8,\n  CASE\n    WHEN MAX(CASE\n      WHEN weeks_since_first_touch = 9 THEN 1\n    ELSE\n    0\n  END\n    ) = 1 THEN user_pseudo_id\n  ELSE\n  NULL\nEND\n  week_9,\n  CASE\n    WHEN MAX(CASE\n      WHEN weeks_since_first_touch = 10 THEN 1\n    ELSE\n    0\n  END\n    ) = 1 THEN user_pseudo_id\n  ELSE\n  NULL\nEND\n  week_10\nFROM\n  with_week_number\nWHERE\n  DATE(first_touch_week) >= DATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 10 WEEK),WEEK(MONDAY))\nGROUP BY\n  user_pseudo_id,\n  country,\n  registered_user_flag,\n  paying_user_flag,\n  first_touch_week,\n  app_info_id,\n  device_category,\n  event_name,\n  user_pseudo_id", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "WITH\n  users AS ( \n  SELECT\n    DISTINCT user_pseudo_id,\n    geo.country\n  FROM\n    `bamboodata-project.analytics_220006363.events_` /* INSERT NAME OF YOUR EVENTS TABLE HERE */\n  WHERE\n    event_timestamp = user_first_touch_timestamp),\n  registrations AS (\n  SELECT\n    DISTINCT user_pseudo_id,\n    MAX(CASE\n        WHEN user_id IS NOT NULL THEN 1\n      ELSE\n      0\n    END\n      ) OVER (PARTITION BY user_pseudo_id) AS registered_user_flag\n  FROM\n    `bamboodata-project`.`dbt_hdumon`.`events`), /* INSERT NAME OF YOUR EVENTS TABLE HERE */\n  paying_users AS (\n  SELECT\n    DISTINCT user_pseudo_id,\n    1 AS paying_user_flag\n  FROM\n    `bamboodata-project.analytics_220006363.events_` /* INSERT NAME OF YOUR EVENTS TABLE HERE */\n  WHERE\n    event_name = 'in_app_purchase'),\n  by_week AS (\n  SELECT\n    DISTINCT TIMESTAMP_TRUNC(TIMESTAMP_MICROS(user_first_touch_timestamp), WEEK(MONDAY), 'UTC') AS first_touch_week,\n    TIMESTAMP_TRUNC(TIMESTAMP_MICROS(event_timestamp), WEEK(MONDAY), 'UTC') AS event_week,\n    event_name,\n    device.category device_category,\n    app_info.id app_info_id,\n    user_pseudo_id\n  FROM\n    `bamboodata-project`.`dbt_hdumon`.`events` /* INSERT NAME OF YOUR EVENTS TABLE HERE */\n--   WHERE\n--    _TABLE_SUFFIX BETWEEN FORMAT_DATE(\"%Y%m%d\", DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH)) /* FILTER OUT EVENTS TABLES THAT ARE MORE THAN 3 MONTHS OLD */\n--     AND FORMAT_DATE(\"%Y%m%d\", DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)) \n  GROUP BY\n    first_touch_week,\n    event_week,\n    event_name,\n    user_pseudo_id,\n    device.category,\n    app_info.id),\n  with_week_number AS (\n  SELECT\n    bw.user_pseudo_id,\n    CASE\n      WHEN pu.paying_user_flag = 1 THEN 'Paying user'\n    ELSE\n    'Non paying user'\n  END\n    paying_user_flag,\n    users.country,\n    reg.registered_user_flag,\n    bw.first_touch_week,\n    bw.event_week,\n    device_category,\n    app_info_id,\n    bw.event_name,\n    FLOOR( TIMESTAMP_DIFF(bw.event_week, bw.first_touch_week, DAY)/7 ) AS weeks_since_first_touch\n  FROM\n    by_week bw\n  LEFT JOIN\n    users\n  ON\n    bw.user_pseudo_id = users.user_pseudo_id\n  LEFT JOIN\n    registrations reg\n  ON\n    bw.user_pseudo_id = reg.user_pseudo_id\n  LEFT JOIN\n    paying_users pu\n  ON\n    bw.user_pseudo_id = pu.user_pseudo_id )\nSELECT\n  country,\n  registered_user_flag,\n  paying_user_flag,\n  first_touch_week,\n  device_category,\n  app_info_id,\n  event_name,\n  user_pseudo_id,\n  CASE\n    WHEN MAX(CASE\n      WHEN weeks_since_first_touch = 0 THEN 1\n    ELSE\n    0\n  END\n    ) = 1 THEN user_pseudo_id\n  ELSE\n  NULL\nEND\n  week_0,\n  CASE\n    WHEN MAX(CASE\n      WHEN weeks_since_first_touch = 1 THEN 1\n    ELSE\n    0\n  END\n    ) = 1 THEN user_pseudo_id\n  ELSE\n  NULL\nEND\n  week_1,\n  CASE\n    WHEN MAX(CASE\n      WHEN weeks_since_first_touch = 2 THEN 1\n    ELSE\n    0\n  END\n    ) = 1 THEN user_pseudo_id\n  ELSE\n  NULL\nEND\n  week_2,\n  CASE\n    WHEN MAX(CASE\n      WHEN weeks_since_first_touch = 3 THEN 1\n    ELSE\n    0\n  END\n    ) = 1 THEN user_pseudo_id\n  ELSE\n  NULL\nEND\n  week_3,\n  CASE\n    WHEN MAX(CASE\n      WHEN weeks_since_first_touch = 4 THEN 1\n    ELSE\n    0\n  END\n    ) = 1 THEN user_pseudo_id\n  ELSE\n  NULL\nEND\n  week_4,\n  CASE\n    WHEN MAX(CASE\n      WHEN weeks_since_first_touch = 5 THEN 1\n    ELSE\n    0\n  END\n    ) = 1 THEN user_pseudo_id\n  ELSE\n  NULL\nEND\n  week_5,\n  CASE\n    WHEN MAX(CASE\n      WHEN weeks_since_first_touch = 6 THEN 1\n    ELSE\n    0\n  END\n    ) = 1 THEN user_pseudo_id\n  ELSE\n  NULL\nEND\n  week_6,\n  CASE\n    WHEN MAX(CASE\n      WHEN weeks_since_first_touch = 7 THEN 1\n    ELSE\n    0\n  END\n    ) = 1 THEN user_pseudo_id\n  ELSE\n  NULL\nEND\n  week_7,\n  CASE\n    WHEN MAX(CASE\n      WHEN weeks_since_first_touch = 8 THEN 1\n    ELSE\n    0\n  END\n    ) = 1 THEN user_pseudo_id\n  ELSE\n  NULL\nEND\n  week_8,\n  CASE\n    WHEN MAX(CASE\n      WHEN weeks_since_first_touch = 9 THEN 1\n    ELSE\n    0\n  END\n    ) = 1 THEN user_pseudo_id\n  ELSE\n  NULL\nEND\n  week_9,\n  CASE\n    WHEN MAX(CASE\n      WHEN weeks_since_first_touch = 10 THEN 1\n    ELSE\n    0\n  END\n    ) = 1 THEN user_pseudo_id\n  ELSE\n  NULL\nEND\n  week_10\nFROM\n  with_week_number\nWHERE\n  DATE(first_touch_week) >= DATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 10 WEEK),WEEK(MONDAY))\nGROUP BY\n  user_pseudo_id,\n  country,\n  registered_user_flag,\n  paying_user_flag,\n  first_touch_week,\n  app_info_id,\n  device_category,\n  event_name,\n  user_pseudo_id"}, "error": null, "status": "CREATE VIEW", "execution_time": 0.9735934734344482, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-27T16:07:10.894837Z", "completed_at": "2020-09-27T16:07:10.928402Z"}, {"name": "execute", "started_at": "2020-09-27T16:07:10.928727Z", "completed_at": "2020-09-27T16:07:11.867412Z"}], "fail": null, "warn": null, "skip": false}], "generated_at": "2020-09-27T16:07:11.941591Z", "elapsed_time": 5.988677740097046}